<?xml version="1.0" encoding="utf-8"?>
<!--
Module:			VolumeHistogram

Description:	Volume Histogram control

Input:			- image 
				
Output:			- color histogram 
				- rotational plot of color values.
				- highlight of mouse over color pixel on Original image.
				
Author(s):		- CT Yeung
				
History:
31Aug08			binary tree and display completed			(cty)
28Sep08			working on spin capability, need scaling & offset.	(cty)
//
// Copyright (c) 2009 C.T.Yeung

// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:

// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->
<mx:Canvas 	xmlns:mx="http://www.adobe.com/2006/mxml" 
			xmlns:com="volumeHistogram.com.*"
			width="450" height="300"
			verticalScrollPolicy="off"
			horizontalScrollPolicy="off"
			creationComplete="onCreationComplete()">
	
		<mx:Metadata>
		[Event(name="highlight", type="flash.events.Event")]	
		[Event(name="endHighlight", type="flash.events.Event")]	
		
	</mx:Metadata>	
	
	<mx:Script>
		<![CDATA[
			import volumeHistogram.com.BinaryTree;
			[Bindable] protected var cmbChoices:Array;	// color space conversion choices

			protected var bmpSrc:BitmapData;			// input original image
			protected var bmpDes:BitmapData;			// processed image
			protected var bmpPlot:BitmapData;			// display data
			protected var tree:BinaryTree;				// histogram

///////////////////////////////////////////////////////////////////////////////////////////////////
// Public UI methods
			
			// ------------------------------------------------------
			// initialization
			// ------------------------------------------------------
			public function onCreationComplete():void
			{
				boxControls.visible = false;
				boxControls.y = -300;
				initCombo();
				tree = new BinaryTree();
			}
			
			// ------------------------------------------------------
			// build histogram from image
			// ------------------------------------------------------
			public function define(bmpData:BitmapData)	// input original image
								  :Boolean				// return true if successful
			{
				tree.emptyTree();
				
				if( bmpSrc)
					bmpSrc.dispose();
					
				this.bmpSrc = bmpData.clone();
				
				for ( var y:int=0; y<bmpSrc.height; y++){
					for (var x:int=0; x<bmpSrc.width; x++){
						tree.insert(bmpSrc.getPixel(x,y));
					}
				}
				drawInit();
				return true;
			}
			
			// ------------------------------------------------------
			// draw image to display histogram
			// ------------------------------------------------------
			public function drawInit():Boolean
			{
				var histogram:Array = tree.getAll();
				imgControl.histogram = histogram;
				imgControl.onInitXYZ();
				return true;
			}
			
			// ------------------------------------------------------
			// roll in/out the display
			// ------------------------------------------------------
			public function onClickIcon():void 
			{
				boxControls.visible=true;
				
				if ( boxControls.y == -300 ) {
					moveOut.end();
					moveOut.play();
				}
				else {
					moveIn.end();
					moveIn.play();
				}
			}
			
///////////////////////////////////////////////////////////////////////////////////////////////////
// properties
			
			// ------------------------------------------------------
			// get original image data
			// ------------------------------------------------------
			public function get bmpSource ():BitmapData {
				return bmpSrc;
			}
			
			// ------------------------------------------------------
			// get processed image data
			// ------------------------------------------------------
			public function get bmpResult ():BitmapData {
				return bmpDes;
			}
			
///////////////////////////////////////////////////////////////////////////////////////////////////
// Private 		
			// ------------------------------------------------------
			// initialize combo box selections
			// ------------------------------------------------------	
			private function initCombo():void
			{
				cmbChoices = ["RGB", "CIE L*a*b*"];
			}
			
			// ------------------------------------------------------
			// move display out
			// ------------------------------------------------------
			private function onMoveOut():void
			{
				boxInfo.visible = true;
			}
			
			// ------------------------------------------------------
			// move display in
			// ------------------------------------------------------
			private function onMoveIn():void
			{
				boxInfo.visible = false;
			}
			
			protected function onClickRotate():void
			{
				switch( btnSpin.direction ) {
					case "up":
					imgControl.rotateX(10);
					break;
					
					case "down":
					imgControl.rotateX(-10);
					break;
					
					case "right":
					imgControl.rotateY(10);
					break;
					
					case "left":
					imgControl.rotateY(-10);
					break;
				}
			}
			
			protected function onColorInfo():void
			{
				var clr:uint = imgControl.clrInFocus;
				var clrCount:uint = imgControl.clrCount;
				txtRed.text = ((clr & 0xFF0000)>>16).toString();
				txtGreen.text = ((clr & 0xFF00)>>8).toString();
				txtBlue.text = (clr & 0xFF).toString();
				txtCount.text = clrCount.toString();
				
				onHighlightBmp(clr);
			}
			
			protected function onHighlightBmp(clrInFocus:uint):void
			{
				if (bmpDes)
					bmpDes.dispose();

				var clrHighLight:uint = clrPckr.selectedColor;
				bmpDes = bmpSrc.clone();
				for ( var y:int=0; y<bmpDes.height; y++) {
					for ( var x:int=0; x<bmpDes.width; x++) {
						var clr:uint = bmpDes.getPixel(x,y);
						if (clr==clrInFocus)
							bmpDes.setPixel(x,y, clrHighLight);
					}
				}
				dispatchEvent(new Event("highlight"));
			}
			
			protected function onRefresh():void
			{
				dispatchEvent(new Event("endHighlight"));
			}
		]]>
	</mx:Script>
	<mx:Move id="moveOut" target="{boxControls}" yFrom="-300" yTo="20" duration="2000" effectEnd="onMoveOut()"/>
	<mx:Move id="moveIn" target="{boxControls}" yFrom="20" yTo="-300" duration="2000" effectStart="onMoveIn()"/>
	
	<mx:VBox height="300" width="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off" x="40">
		
	<!-- Retractable Histogram Display -->
		<mx:HBox id="boxControls" backgroundColor="0xFFFFFF"
				 paddingBottom="10" paddingLeft="10" 
				 paddingRight="10" paddingTop="10" height="100%" width="100%">
				 
	<!-- Volume histogram -->
			<mx:VBox borderColor="0x88" borderThickness="1" borderStyle="solid">
				<com:RotateImage id="imgControl" width="256" height="256" 
								  newColorInfo="onColorInfo()" refresh="onRefresh()"/>
			</mx:VBox>
			
	<!-- Controls -->
			<mx:VBox id="boxButtons" height="100%">
				<mx:ComboBox id="cmbColor" dataProvider="{cmbChoices}" width="110" enabled="false"/>
				<com:RotateControl id="btnSpin" width="100" height="100" rotateClicked="onClickRotate()"/>
				<mx:HBox>
					<mx:Button id="btnReduce" label="(-)" width="50" enabled="false"/>
					<mx:Button id="btnEnlarge" label="(+)" width="50" enabled="false"/>
				</mx:HBox>
			</mx:VBox>
		</mx:HBox>
	</mx:VBox>
	
	<!-- Retraction control (icon) -->
	<mx:HBox>
		<mx:Image 	id="imgIcon" 
					source="@Embed(source='../style/3Dhstgrm.PNG')"
					useHandCursor="true"
					buttonMode="true"
					click="onClickIcon()" />
	</mx:HBox>
	
	<!-- hover information -->
		<mx:VBox id="boxInfo" includeInLayout="false" x="315" y="200" visible="false" 
			horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:HBox>
				<mx:VBox>
					<mx:HBox>
						<mx:Label text="R:" />
						<mx:Label id="txtRed" width="30" />
					</mx:HBox>
					<mx:HBox>
						<mx:Label text="G:" />
						<mx:Label id="txtGreen" />
					</mx:HBox>
					<mx:HBox>
						<mx:Label text="B:" />
						<mx:Label id="txtBlue" />
					</mx:HBox>
				</mx:VBox>
				<mx:ColorPicker id="clrPckr" selectedColor="0xFFFF00" showTextField="true" 
						useHandCursor="true" buttonMode="true"/>
			</mx:HBox>
			<mx:HBox>
				<mx:Label text="Count:" />
				<mx:Label id="txtCount" />
			</mx:HBox>
		</mx:VBox>
		
	
</mx:Canvas>
